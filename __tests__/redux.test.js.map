{"version":3,"file":"redux.test.js","sourceRoot":"","sources":["../../__tests__/redux.test.ts"],"names":[],"mappings":";;AAAA,iCAAqD;AAErD,gCAAmC;AAEnC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE;IAGjB,MAAM,YAAY,GAAU;QAC1B,OAAO,EAAE,KAAK;QACd,MAAM,EAAE,EAAE;KACX,CAAC;IAEF,MAAM,YAAY;QAChB,YAAoB,KAAY;YAAZ,UAAK,GAAL,KAAK,CAAO;QAAG,CAAC;QAEpC,OAAO;YACL,uCAAY,IAAI,CAAC,KAAK,KAAE,OAAO,EAAE,IAAI,IAAG;QAC1C,CAAC;QAED,OAAO,CAAC,MAAc;YACpB,uCACK,IAAI,CAAC,KAAK,KACb,OAAO,EAAE,KAAK,EACd,MAAM,IACN;QACJ,CAAC;KACF;IAED,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,eAAS,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;IACjE,MAAM,KAAK,GAAG,mBAAW,CAAC,OAAO,CAAC,CAAC;IAEnC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7C,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAEzC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;IAClC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5C,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAEzC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;IACxC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7C,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC/C,CAAC,CAAC,CAAC","sourcesContent":["import { combineReducers, createStore } from \"redux\";\n\nimport { withRedux } from \"../src\";\n\ntest(\"redux\", () => {\n  type State = { loading: boolean; result: string };\n\n  const initialState: State = {\n    loading: false,\n    result: \"\"\n  };\n\n  class ReducerClass {\n    constructor(private state: State) {}\n\n    request(): State {\n      return { ...this.state, loading: true };\n    }\n\n    succeed(result: string): State {\n      return {\n        ...this.state,\n        loading: false,\n        result\n      };\n    }\n  }\n\n  const [methods, reducer] = withRedux(ReducerClass, initialState);\n  const store = createStore(reducer);\n\n  expect(store.getState().loading).toBe(false);\n  expect(store.getState().result).toBe(\"\");\n\n  store.dispatch(methods.request());\n  expect(store.getState().loading).toBe(true);\n  expect(store.getState().result).toBe(\"\");\n\n  store.dispatch(methods.succeed(\"test\"));\n  expect(store.getState().loading).toBe(false);\n  expect(store.getState().result).toBe(\"test\");\n});\n"]}