{"version":3,"file":"redux.js","sourceRoot":"","sources":["../src/redux.ts"],"names":[],"mappings":";;AAEA,MAAM,SAAS;IACb,YAAY,MAAW;QACrB,MAAM,CAAC,IAAI,CAAC,IAAI,MAAM,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACvC,IAAI,IAAI,KAAK,aAAa,IAAI,IAAI,KAAK,OAAO;gBAAE,OAAO;YACvD,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC;YAC5C,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAED,SAAS,SAAS,CAAI,MAA4B;IAChD,OAAO,IAAI,SAAS,CAAC,MAAM,CAAQ,CAAC;AACtC,CAAC;AAED,SAAS,WAAW,CAAgB,QAAW;IAC7C,MAAM,MAAM,GAAG,CAAC,KAAU,EAAE,CAA8B,EAAc,EAAE;QACxE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;QACzB,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACvC,IAAI,QAAQ,CAAC,WAAW,CAAC,IAAI,KAAK,IAAI;YAAE,OAAO,KAAK,CAAC;QAErD,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAE;YACpB,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;YACvB,uCAAY,KAAK,GAAK,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,EAAG;SACnD;aAAM;YACL,OAAO,KAAK,CAAC;SACd;IACH,CAAC,CAAC;IACF,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,SAAgB,SAAS,CACvB,MAA6B,EAC7B,YAAe;IAKf,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC;IAE1C,MAAM,OAAO,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;IAClC,MAAM,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC;IAErC,MAAM,OAAO,GAAG,CAAC,KAAK,GAAG,YAAY,EAAE,MAAW,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAE7E,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;AAC5B,CAAC;AAfD,8BAeC","sourcesContent":["import { ActionCreator, ValidState } from \"./typings/action\";\n\nclass WrapRedux {\n  constructor(target: any) {\n    Object.keys(new target()).forEach(type => {\n      if (type === \"constructor\" || type === \"state\") return;\n      const actionType = target.name + \"_\" + type;\n      this[type] = (...args) => ({ type: actionType, args });\n    });\n  }\n}\n\nfunction wrapRedux<T>(target: { new (...args): T }) {\n  return new WrapRedux(target) as any;\n}\n\nfunction exposeRedux<T extends any>(instance: T) {\n  const update = (state: any, v: { type: string; args: any }): T[\"state\"] => {\n    const { type, args } = v;\n    const [name, method] = type.split(\"_\");\n    if (instance.constructor.name !== name) return state;\n\n    if (instance[method]) {\n      instance.state = state;\n      return { ...state, ...instance[method](...args) };\n    } else {\n      return state;\n    }\n  };\n  return update;\n}\n\nexport function withRedux<A extends any, B>(\n  target: { new (state: B): A },\n  initialState: B\n): [\n  Omit<ActionCreator<A, Required<B>>, \"state\">,\n  (state: B | undefined, action: Omit<A[keyof A], \"state\">) => ValidState<B, A>\n] {\n  const instance = new target(initialState);\n\n  const methods = wrapRedux(target);\n  const update = exposeRedux(instance);\n\n  const reducer = (state = initialState, action: any) => update(state, action);\n\n  return [methods, reducer];\n}\n"]}