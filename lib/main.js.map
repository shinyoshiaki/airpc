{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":";;AAUA,MAAM,IAAI;IACR,YAAY,MAAW,EAAE,OAAgB;QACvC,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC1D,IAAI,IAAI,KAAK,aAAa;gBAAE,OAAO;YAEnC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,EAAE,EAAE,CACvB,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;gBACd,MAAM,QAAQ,GAAG,YAAY,EAAE,CAAC;gBAEhC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;oBAC9B,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBAC3C,IAAI,QAAQ,KAAK,IAAI,EAAE;wBACrB,CAAC,CAAC,QAAQ,CAAC,CAAC;qBACb;gBACH,CAAC,CAAC,CAAC;gBAEH,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;YAC/D,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAED,SAAgB,IAAI,CAAI,MAAqB,EAAE,OAAgB;IAC7D,OAAO,IAAI,IAAI,CAAC,MAAM,EAAE,OAAO,CAAQ,CAAC;AAC1C,CAAC;AAFD,oBAEC;AAED,SAAgB,MAAM,CAAC,QAAa,EAAE,OAAgB;IACpD,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;QACpB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;QAC1B,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC/C,MAAM,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;QACzC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;AACL,CAAC;AAPD,wBAOC;AAED,SAAS,YAAY;IACnB,OAAO,IAAI,KAAK,CAAC,CAAC,CAAC;SAChB,IAAI,CAAC,CAAC,CAAC;SACP,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;SAC3E,IAAI,CAAC,GAAG,CAAC,CAAC;AACf,CAAC","sourcesContent":["import { Remote } from \"./typings/remote\";\nimport { Subject } from \"rxjs\";\n\nexport type Wrapper = { subject: Subject<string>; post: (v: any) => void };\nexport type Exposer = Subject<ExposerObject>;\nexport type ExposerObject = {\n  port: { postMessage: (v: string) => void };\n  value: string;\n};\n\nclass Wrap {\n  constructor(target: any, wrapper: Wrapper) {\n    Object.getOwnPropertyNames(target.prototype).forEach(type => {\n      if (type === \"constructor\") return;\n\n      this[type] = (...args) =>\n        new Promise(r => {\n          const parentId = generateUUID();\n\n          wrapper.subject.subscribe(res => {\n            const { uuid, response } = JSON.parse(res);\n            if (parentId === uuid) {\n              r(response);\n            }\n          });\n\n          wrapper.post(JSON.stringify({ type, args, uuid: parentId }));\n        });\n    });\n  }\n}\n\nexport function wrap<T>(target: { new (): T }, wrapper: Wrapper): Remote<T> {\n  return new Wrap(target, wrapper) as any;\n}\n\nexport function expose(instance: any, exposer: Exposer) {\n  exposer.subscribe(v => {\n    const { port, value } = v;\n    const { type, args, uuid } = JSON.parse(value);\n    const response = instance[type](...args);\n    port.postMessage(JSON.stringify({ uuid, response }));\n  });\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n"]}