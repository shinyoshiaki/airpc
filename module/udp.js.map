{"version":3,"file":"udp.js","sourceRoot":"","sources":["../../../src/module/udp.ts"],"names":[],"mappings":";;AAAA,+BAA+B;AAG/B,8CAAkD;AAErC,QAAA,UAAU,GAAG,CAAC,MAAc,EAAE,IAAY,EAAE,OAAe,EAAE,EAAE;IAC1E,MAAM,OAAO,GAAG,IAAI,cAAO,EAAiB,CAAC;IAC7C,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC,EAAE;QAC7B,MAAM,IAAI,GAAQ,gBAAM,CAAC,OAAO,CAAC,CAAC;QAClC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACzB,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO;YAAE,OAAO;QAClC,OAAO,CAAC,IAAI,CAAC;YACX,KAAK;YACL,WAAW,EAAE,CAAC,CAAC,EAAE;gBACf,MAAM,CAAC,IAAI,CAAC,gBAAM,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YAClE,CAAC;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEW,QAAA,UAAU,GAAG,CAAC,MAAc,EAAE,IAAY,EAAE,OAAe,EAAE,EAAE;IAC1E,MAAM,OAAO,GAAG,IAAI,cAAO,EAAc,CAAC;IAC1C,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC,EAAE;QAC7B,MAAM,IAAI,GAAQ,gBAAM,CAAC,OAAO,CAAC,CAAC;QAClC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACzB,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO;YAAE,OAAO;QAClC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACtB,CAAC,CAAC,CAAC;IACH,MAAM,IAAI,GAAG,CAAC,KAAiB,EAAE,EAAE;QACjC,MAAM,CAAC,IAAI,CAAC,gBAAM,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACtE,CAAC,CAAC;IACF,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;AAC3B,CAAC,CAAC","sourcesContent":["import { Subject } from \"rxjs\";\nimport { ExposerObject } from \"../main\";\nimport { Socket } from \"dgram\";\nimport { decode, encode } from \"@msgpack/msgpack\";\n\nexport const udpExposer = (socket: Socket, port: number, address: string) => {\n  const subject = new Subject<ExposerObject>();\n  socket.on(\"message\", message => {\n    const data: any = decode(message);\n    const value = data.value;\n    if (data.type !== \"airpc\") return;\n    subject.next({\n      value,\n      postMessage: v => {\n        socket.send(encode({ type: \"airpc\", value: v }), port, address);\n      }\n    });\n  });\n  return subject;\n};\n\nexport const udpWrapper = (socket: Socket, port: number, address: string) => {\n  const subject = new Subject<Uint8Array>();\n  socket.on(\"message\", message => {\n    const data: any = decode(message);\n    const value = data.value;\n    if (data.type !== \"airpc\") return;\n    subject.next(value);\n  });\n  const post = (uint8: Uint8Array) => {\n    socket.send(encode({ type: \"airpc\", value: uint8 }), port, address);\n  };\n  return { subject, post };\n};\n"]}